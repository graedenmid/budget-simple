# Budget Simple - Cursor Development Rules

## Project Context

This is Budget Simple, a web-based personal finance management application built with Next.js 14, TypeScript, Tailwind CSS, and Supabase. Always refer to PRD.md and implementation-plan.md for project requirements and roadmap.

## Tech Stack Rules

### Next.js 14 & React 18

- Use App Router architecture (not Pages Router)
- Implement Server Components by default, Client Components only when needed
- Use TypeScript for all files (.ts, .tsx)
- Follow Next.js 14 conventions for routing, layouts, and data fetching
- Use Next.js built-in optimizations (Image, Font, etc.)
- Implement proper loading, error, and not-found pages

### TypeScript

- Enable strict mode in tsconfig.json
- Use explicit types, avoid 'any'
- Create proper interfaces for all data structures
- Use utility types (Partial, Pick, Omit) when appropriate
- Implement proper error types and exception handling

### Styling & UI

- Use Tailwind CSS for all styling
- Follow Shadcn/ui component patterns and conventions
- Implement responsive design (mobile-first approach)
- Use CSS Grid and Flexbox appropriately
- Follow consistent spacing and color schemes
- Implement dark/light mode support

### Supabase Integration

- Use Supabase client for all database operations
- Implement Row-Level Security (RLS) for all tables
- Use TypeScript types generated from Supabase schema
- Handle authentication state properly
- Implement proper error handling for database operations
- Use Supabase Edge Functions for complex business logic

## Code Quality Rules

### File Organization

- Group related files in feature-based folders
- Use index.ts files for clean imports
- Separate types, utilities, and components
- Follow consistent naming conventions

### Component Guidelines

- Use functional components with hooks
- Implement proper prop types with TypeScript interfaces
- Use forwardRef for components that need ref access
- Keep components small and focused (single responsibility)
- Use custom hooks for complex state logic

### State Management

- Use React hooks for local state (useState, useReducer)
- Use Context API for app-wide state when needed
- Consider Zustand for complex state management (if needed)
- Implement proper loading and error states

### Performance

- Use React.memo for expensive components
- Implement proper key props for lists
- Use useMemo and useCallback judiciously
- Optimize images with Next.js Image component
- Implement code splitting where appropriate

### Security

- Never expose sensitive data to client-side
- Validate all inputs on both client and server
- Use environment variables for sensitive configuration
- Implement proper CORS settings
- Follow OWASP security guidelines

## Testing

- Write unit tests for utility functions
- Write integration tests for API routes
- Write component tests for complex UI logic
- Use Jest and React Testing Library
- Maintain >80% code coverage for critical paths

## Error Handling

- Implement proper error boundaries
- Use try-catch blocks for async operations
- Provide meaningful error messages to users
- Log errors appropriately for debugging
- Handle network failures gracefully

## Accessibility

- Follow WCAG 2.1 AA guidelines
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation works
- Test with screen readers

## Performance Targets

- First Contentful Paint: <2s (desktop), <3.5s (mobile)
- Page load time: <3s
- Database queries: <500ms
- Core Web Vitals: Good scores

## Development Workflow

- Follow the implementation-plan.md phases
- Make changes file-by-file for easier review
- Write descriptive commit messages
- Use TypeScript strict mode
- Run linting and type checks before commits
- Test all changes thoroughly before deployment

## Git Workflow (REQUIRED)

- NEVER push directly to main branch
- Always create feature branches for changes
- Use descriptive branch names: feature/add-auth, fix/button-styling, etc.
- Push branches and create Pull Requests for review
- Let GitHub Actions CI/CD run on all PRs
- Review Vercel preview deployments before merging
- Only merge to main after CI passes and review is complete
- Delete feature branches after successful merge

## Branch Naming Convention

- Features: feature/description-of-feature
- Bug fixes: fix/description-of-fix
- Database changes: db/description-of-schema-change
- UI updates: ui/description-of-ui-change
- Documentation: docs/description-of-docs-change

## Phase Completion Review Process

- **Linter Error Review**: After completing each major step/phase in the implementation plan, perform a comprehensive review of all linter errors
- **Error Assessment**: Carefully analyze each linter error to understand its cause and impact on code quality
- **Resolution Strategy**: For each error, determine whether it should be:
  - Fixed immediately (critical errors affecting functionality or security)
  - Fixed in the current phase (quality improvements that are quick to resolve)
  - Deferred to a later phase (non-critical styling or preference issues)
  - Documented as intentional (rare cases where the linter rule doesn't apply)
- **Clean State**: Ensure each completed phase leaves the codebase in a clean, maintainable state
- **Technical Debt Management**: Track deferred linter errors and plan their resolution in future phases

## Terminal Commands (CRITICAL RULE - NEVER VIOLATE)

- **NEVER run terminal commands automatically** - Always provide command prompts for the user to run manually
- Write clear, complete commands with explanations
- Do not ask permission to run commands - just provide them
- **Example Format**: "Please run: `npm run lint` to check for linter errors"

## Rule Compliance Checklist (MANDATORY BEFORE EVERY ACTION)

**STOP AND VERIFY BEFORE EACH RESPONSE:**

1. **Terminal Commands Check**

   - [ ] Am I about to run a terminal command? → PROVIDE COMMAND PROMPT INSTEAD
   - [ ] Am I asking permission to run commands? → NEVER ASK, JUST PROVIDE THEM

2. **File Change Protocol**

   - [ ] Am I making file changes? → Follow file-by-file approach
   - [ ] Am I creating unnecessary files? → Only create if absolutely necessary

3. **Phase Completion Protocol**

   - [ ] Did I just complete a major step/phase? → MUST review linter errors first
   - [ ] Am I proceeding to next phase? → Previous phase must be in clean state

4. **Implementation Tracking**
   - [ ] Am I following the implementation-plan.md sequence? → Stay on planned track
   - [ ] Am I updating completion status correctly? → Mark steps as done with summary

**CRITICAL: If ANY checkbox is unchecked, STOP and address the violation immediately.**
